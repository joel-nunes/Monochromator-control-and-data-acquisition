int BI_automeasure(double* reading);
int BI_autorange(void);
int BI_build_group(void);
int BI_build_system_model(char* pFileName, char* pError);
int BI_close(void);
int BI_close_shutter(void);
int BI_component_select_wl(char* pID, double Wavelength, long* pDelay);
int BI_get(char* pID, int Token, int Index, double* pValue);
int BI_get_c_group(int* n);
int BI_get_component_list(char* list);
int BI_get_group(int Group, char* pDescription);
int BI_get_hardware_type(char* id, int* hardware_type);
int BI_get_mono_items(char* pMonoID, char* ItemIDs);
int BI_get_no_of_dark_currents(int* NoOfValues);
int BI_get_zero_calibration_info(double* Wavelength, double* DarkCurrent, double* ADCOffset);
int BI_group_add(char* pID, int Group);
int BI_group_remove(char* pID, int Group);
int BI_initialise(void);
int BI_load_setup(char* pFileName);
int BI_measurement(double* Reading);
int BI_multi_autorange(void);
int BI_multi_get_no_of_dark_currents(int Group, int* NoOfValues);
int BI_multi_get_zero_calibration_info(int Group, double* Wavelength, double* DarkCurrent, double* ADCOffset);
int BI_multi_initialise(void);
int BI_multi_measurement(double* Reading);
int BI_multi_select_wavelength(double Wavelength, long* pDelay);
int BI_multi_zero_calibration(double StartWavelength, double StopWavelength);
int BI_park(void);
int BI_read(char* pMessage, short BufferSize, short* CharsRead, char* pID);
int BI_report_error(void);
int BI_save_setup(char* pFileName);
int BI_select_wavelength(double Wavelength, long* pDelay);
int BI_send(char* pMessage, char* pID);
int BI_set(char* pID, int Token, int Index, double Value);
int BI_trace(int On, char* logginDir);
int BI_use_group(int Group);
void BI_version(char* pDescription);
int BI_zero_calibration(double StartWavelength, double StopWavelength);
int BI_camera_get_zero_calibration_info(char* pID, double* Wavelength, double* DarkCurrent, double* ADCOffset);
int BI_camera_measurement(char* pID, int num, double* readings);
int BI_camera_zero_calibration(char* pID, double StartWavelength, double StopWavelength);
int BI_delete_group(int n);
int BI_get_log(char* log);
int BI_get_log_size(int* size);
int BI_get_max_bw(int group, double StartWavelength, double StopWavelength, double* bandwidth);
int BI_get_min_step(int group, double StartWavelength, double StopWavelength, double* min_step);
int BI_get_n_groups(int* n);
int BI_get_str(char* id, int token, int index, char* s);
void BI_Mapped_Logging(int i);
int BI_multi_automeasure(double* reading);
int BI_multi_park(void);
int BI_start_log(char* c_list);
int BI_stop_log(char* c_list);

