function [methodinfo,structs,enuminfo,ThunkLibName]=benhw64_protofile
%BENHW64_PROTOFILE Create structures to define interfaces found in 'bendll'.

%This function was generated by loadlibrary.m parser version  on Tue Sep  7 23:31:22 2021
%perl options:'bendll.i -outfile=benhw64_protofile.m -thunkfile=benhw64_thunk_pcwin64.c -header=bendll.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'benhw64_thunk_pcwin64');
% int BI_automeasure ( double * reading ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_automeasure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% int BI_autorange ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_autorange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_build_group ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_build_group'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_build_system_model ( char * pFileName , char * pError ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='BI_build_system_model'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int BI_close ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_close_shutter ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_close_shutter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_component_select_wl ( char * pID , double Wavelength , long * pDelay ); 
fcns.thunkname{fcnNum}='int32cstringdoublevoidPtrThunk';fcns.name{fcnNum}='BI_component_select_wl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'double', 'longPtr'};fcnNum=fcnNum+1;
% int BI_get ( char * pID , int Token , int Index , double * pValue ); 
fcns.thunkname{fcnNum}='int32cstringint32int32voidPtrThunk';fcns.name{fcnNum}='BI_get'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int BI_get_c_group ( int * n ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_get_c_group'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int BI_get_component_list ( char * list ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='BI_get_component_list'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int BI_get_group ( int Group , char * pDescription ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='BI_get_group'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int BI_get_hardware_type ( char * id , int * hardware_type ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='BI_get_hardware_type'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int BI_get_mono_items ( char * pMonoID , char * ItemIDs ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='BI_get_mono_items'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int BI_get_no_of_dark_currents ( int * NoOfValues ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_get_no_of_dark_currents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int BI_get_zero_calibration_info ( double * Wavelength , double * DarkCurrent , double * ADCOffset ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='BI_get_zero_calibration_info'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int BI_group_add ( char * pID , int Group ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='BI_group_add'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int BI_group_remove ( char * pID , int Group ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='BI_group_remove'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int BI_initialise ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_initialise'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_load_setup ( char * pFileName ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='BI_load_setup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int BI_measurement ( double * Reading ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_measurement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% int BI_multi_autorange ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_multi_autorange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_multi_get_no_of_dark_currents ( int Group , int * NoOfValues ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='BI_multi_get_no_of_dark_currents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int BI_multi_get_zero_calibration_info ( int Group , double * Wavelength , double * DarkCurrent , double * ADCOffset ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='BI_multi_get_zero_calibration_info'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int BI_multi_initialise ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_multi_initialise'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_multi_measurement ( double * Reading ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_multi_measurement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% int BI_multi_select_wavelength ( double Wavelength , long * pDelay ); 
fcns.thunkname{fcnNum}='int32doublevoidPtrThunk';fcns.name{fcnNum}='BI_multi_select_wavelength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'double', 'longPtr'};fcnNum=fcnNum+1;
% int BI_multi_zero_calibration ( double StartWavelength , double StopWavelength ); 
fcns.thunkname{fcnNum}='int32doubledoubleThunk';fcns.name{fcnNum}='BI_multi_zero_calibration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
% int BI_park ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_park'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_read ( char * pMessage , short BufferSize , short * CharsRead , char * pID ); 
fcns.thunkname{fcnNum}='int32cstringint16voidPtrcstringThunk';fcns.name{fcnNum}='BI_read'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int16', 'int16Ptr', 'cstring'};fcnNum=fcnNum+1;
% int BI_report_error ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_report_error'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_save_setup ( char * pFileName ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='BI_save_setup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int BI_select_wavelength ( double Wavelength , long * pDelay ); 
fcns.thunkname{fcnNum}='int32doublevoidPtrThunk';fcns.name{fcnNum}='BI_select_wavelength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'double', 'longPtr'};fcnNum=fcnNum+1;
% int BI_send ( char * pMessage , char * pID ); 
fcns.thunkname{fcnNum}='int32cstringcstringThunk';fcns.name{fcnNum}='BI_send'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int BI_set ( char * pID , int Token , int Index , double Value ); 
fcns.thunkname{fcnNum}='int32cstringint32int32doubleThunk';fcns.name{fcnNum}='BI_set'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int BI_trace ( int On , char * logginDir ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='BI_trace'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int BI_use_group ( int Group ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='BI_use_group'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void BI_version ( char * pDescription ); 
fcns.thunkname{fcnNum}='voidcstringThunk';fcns.name{fcnNum}='BI_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int BI_zero_calibration ( double StartWavelength , double StopWavelength ); 
fcns.thunkname{fcnNum}='int32doubledoubleThunk';fcns.name{fcnNum}='BI_zero_calibration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
% int BI_camera_get_zero_calibration_info ( char * pID , double * Wavelength , double * DarkCurrent , double * ADCOffset ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='BI_camera_get_zero_calibration_info'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int BI_camera_measurement ( char * pID , int num , double * readings ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrThunk';fcns.name{fcnNum}='BI_camera_measurement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int BI_camera_zero_calibration ( char * pID , double StartWavelength , double StopWavelength ); 
fcns.thunkname{fcnNum}='int32cstringdoubledoubleThunk';fcns.name{fcnNum}='BI_camera_zero_calibration'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int BI_delete_group ( int n ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='BI_delete_group'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int BI_get_log ( char * log ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='BI_get_log'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int BI_get_log_size ( int * size ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_get_log_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int BI_get_max_bw ( int group , double StartWavelength , double StopWavelength , double * bandwidth ); 
fcns.thunkname{fcnNum}='int32int32doubledoublevoidPtrThunk';fcns.name{fcnNum}='BI_get_max_bw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% int BI_get_min_step ( int group , double StartWavelength , double StopWavelength , double * min_step ); 
fcns.thunkname{fcnNum}='int32int32doubledoublevoidPtrThunk';fcns.name{fcnNum}='BI_get_min_step'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% int BI_get_n_groups ( int * n ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_get_n_groups'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int BI_get_str ( char * id , int token , int index , char * s ); 
fcns.thunkname{fcnNum}='int32cstringint32int32cstringThunk';fcns.name{fcnNum}='BI_get_str'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% void BI_Mapped_Logging ( int i ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='BI_Mapped_Logging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int BI_multi_automeasure ( double * reading ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='BI_multi_automeasure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% int BI_multi_park ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='BI_multi_park'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int BI_start_log ( char * c_list ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='BI_start_log'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int BI_stop_log ( char * c_list ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='BI_stop_log'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
methodinfo=fcns;